1. Introduction
I plan to build full fledged issue-tracking software.
Available per each user on each of his projects.
Attempting to build software as fast as possible.
Goal is to get minimalist usable app within a month.

1.1 Purpose
Enable issue reporting & tracking the state.

1.2 Intended Audience
For developers of the product to track pending issues and check new ones.
For users to report issues encountered on usage.

1.3 Intended Use
Developers will be able to interact with users regarding posted issues.
Require more information regarding given issue.
Users will be able to provide more information if required.

1.4 Scope
Interaction with users regarding encountered issues, improvements,
quality changes. Tracking of pending improvements, notifying upon completion.
Create usable, full fledged issue tracking app with growth possibility.

1.5 Definitions and Acronyms
Don't take more work than doable over period of each week.
Carefully decide features to implement next week.
Track progress and reflect back on work from past week on saturday.
Set goals on sunday.
See the project through.

2. Overall Description
Issue tracker is my own new project.
Goal of building issue-tracker is to use up all my accumulated skills and 
knowledge to build whole app from scratch.

I'll be using this issue tracker to track my achievments and progress.

2.1 User Needs


2.2 Assumptions and Dependencies

3. System Features and Requirements

  3.1 Functional Requirements
    find user
    user has owning / participating repos
    /`${user}`
    /`${user}`/`${project}`
    /`${user}`/`${project}`/labels
    /`${user}`/`${project}`/issues
    /`${user}`/`${project}`/settings
    /`${user}`/`${project}`/issues/templates

    ## login
    ## project assigned user roles (how do they work? what do they have?)
    ## notifications (how do they work? what do they have?)

    == PAGE ==
    settings
      * edit templates
      * edit labels

    == PAGE ==
    edit templates
      * save changes
      * add template - (BUG | FEATURE | CUSTOM)

    template
      * name
      * about
      * preview_and_edit
      * delete

    preview_and_edit
      * preview
      * edit

    preview
      -- rendered markdown input as html --
      * title
      * about
      * content

      - optional -
      * default title
      * assignees
      * labels

    edit
      * name (template)
      * about (template)
      * content (template)

      - optional -
      * default title
      * assignees
      * labels

    assignees
      * dropdown

    labels
      * dropdown

    dropdown
      * title
      * search text
      * search results

    == PAGE ==
    edit labels
      * search bar
      * label
      * new label - label editor
      * edit label - label editor
      * delete

    search bar
      * icon
      * search text

    label editor
      * label
      * edit

    edit
      * name
      * description
      * color (hex value)
      * cancel
      * save changes

    label
      * text
      * background-color

    == PAGE ==
    new issue type
      * [...issue_type]
      * dont see your issue? Open blank issue

    issue type (ex: (BUG | FEATURE | OTHER | [...]))
      * title
      * about
      * get started

    == PAGE ==
    create new issue
      * title is issue type
      * about text + if this doesnt look right choose different type
      * text editor
      * issue aside

    text editor
      * default title
      * write
      * preview
      * submit

    issue aside
      * assignees
      * labels

    == PAGE ==
    view issues
      * (open | closed)
        * new issue
        * filter (author)
        * filter (label)
        * filter (asignee)
        * filter (sort)
        * [...issue]
        * issues page [previous, [...numbers], next]

    issue
      * [title, [...labels]]
      * [id, date opened, who opened]

      * number of comments

    == PAGE ==
    view issue
      * title
      * [status (OPEN | CLOSED)]
      * link to name
      * date/time opened
      * number of comments
      * issue aside
      * subscribe to notifications
      * [...comments] (first comment is regarding issue | suggestion | enhancement | ...)
      * [...(edited title | added label)]
      * text editor (leave comment)

    comment
      * image as link to profile of person who posted comment
      * username as link to profile of person who posted comment
      * date/time commented as link to comment in issue
      * edited by `${latest}` (list)
      * content

    edited by `${latest}` (list)
      * last item is content after creation (every next is after editing)
      * [...who_edited]

    who_edited
      * content after editing

    content after editing
      * picture
      * name
      * when edited
      * content

  3.2 External Interface Requirements

  3.3 System Features

  3.4 Nonfunctional Requirements